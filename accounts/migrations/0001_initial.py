# Generated by Django 3.1.1 on 2022-03-27 13:50

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import rules.contrib.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('photologue', '0011_auto_20190223_2138'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DonatorData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('phone', models.CharField(max_length=20, verbose_name='phone')),
                ('citizenship', django_countries.fields.CountryField(max_length=30, verbose_name='citizenship')),
                ('postAddress', models.CharField(max_length=200, verbose_name='postAdress')),
                ('TIN', models.CharField(default=None, max_length=10, null=True, verbose_name='TIN')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LegalEntityDonatorData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('type', models.CharField(max_length=50, verbose_name='type')),
                ('headquarters', django_countries.fields.CountryField(max_length=30, null=True, verbose_name='headquarters')),
                ('EIK', models.CharField(max_length=50, verbose_name='EIK')),
                ('DDORegistration', models.BooleanField(verbose_name='DDORegistration')),
                ('phoneNumber', models.CharField(max_length=30, verbose_name='phoneNumber')),
                ('postAddress', models.CharField(max_length=200, verbose_name='postAdress')),
                ('TIN', models.CharField(default=None, max_length=10, null=True, verbose_name='TIN')),
                ('website', models.CharField(blank=True, max_length=100, verbose_name='website')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that username already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('bal', models.IntegerField(default=20, validators=[django.core.validators.MaxValueValidator(100)])),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('second_name', models.CharField(blank=True, max_length=30, verbose_name='second_name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('slack_channel', models.CharField(blank=True, max_length=100, null=True, verbose_name='slack_channel')),
                ('birthdate', models.DateField(null=True, verbose_name='birthdate')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_administrator', models.BooleanField(default=False)),
                ('is_member', models.BooleanField(default=False)),
                ('privacy_policy', models.BooleanField(default=False)),
                ('platform_policy', models.BooleanField(default=False)),
                ('donatorData', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.donatordata')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('legalEntityDonatorData', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.legalentitydonatordata')),
                ('photo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='photologue.photo')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
            },
            bases=(models.Model, rules.contrib.models.RulesModelMixin),
        ),
    ]
