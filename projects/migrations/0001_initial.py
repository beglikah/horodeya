# Generated by Django 3.1.1 on 2022-03-27 13:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import rules.contrib.models
import stream_django.activity


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('photologue', '0011_auto_20190223_2138'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BugReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('message', models.TextField(verbose_name='message')),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MoneySupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('supportType', models.CharField(max_length=30, null=True)),
                ('comment', models.TextField(blank=True, verbose_name='Do you have a comment')),
                ('status', models.CharField(choices=[('review', 'review'), ('delivered', 'delivered'), ('accepted', 'accepted'), ('declined', 'declined'), ('expired', 'expired')], default='review', max_length=20, verbose_name='status')),
                ('status_since', models.DateTimeField(default=django.utils.timezone.now, verbose_name='status_since')),
                ('leva', models.FloatField(verbose_name='How much do you wish to donate')),
                ('payment_method', models.CharField(default='Unspecified', max_length=20, verbose_name='Choose a payment method')),
                ('pay_time', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('type', models.CharField(choices=[('business', 'business'), ('cause', 'cause')], max_length=20)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('location', models.CharField(max_length=30, null=True, verbose_name='location')),
                ('goal', models.TextField(null=True, verbose_name='goal')),
                ('description', models.CharField(max_length=300, verbose_name='description')),
                ('text', models.TextField(max_length=5000, verbose_name='text')),
                ('start_date', models.DateField(null=True, verbose_name='start_date')),
                ('end_date', models.DateField(null=True, verbose_name='end_date')),
                ('end_date_tasks', models.DateField(null=True, verbose_name='end_date_tasks')),
                ('report_period', models.CharField(choices=[('weekly', 'weekly'), ('monthly', 'montly'), ('twoweeks', 'twoweeks')], default='weekly', max_length=50, verbose_name='report_period')),
                ('category', models.CharField(choices=[('Creativity', 'Наука и творчество'), ('Education', 'Просвета и възпитание'), ('Art', 'Култура и артистичност'), ('Administration', 'Администрация и финанси'), ('Willpower', 'Спорт и туризъм'), ('Health', 'Бит и здравеопазване'), ('Food', 'Земеделие и изхранване')], default='Education', max_length=50, verbose_name='category')),
                ('slack_channel', models.CharField(blank=True, max_length=100, null=True, verbose_name='slack_channel')),
                ('verified_status', models.CharField(choices=[('review', 'review'), ('accepted', 'accepted'), ('rejected', 'rejected')], default='review', max_length=20, null=True, verbose_name='verified_status')),
                ('gallery', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='photologue.gallery')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionPrototype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('text_bg', models.CharField(max_length=100, unique=True)),
                ('text_en', models.CharField(max_length=100, unique=True)),
                ('type', models.CharField(choices=[('CharField', 'CharField'), ('TextField', 'TextField'), ('FileField', 'FileField'), ('ChoiceField', 'ChoiceField'), ('Necessities', 'Necessities')], max_length=20)),
                ('order', models.IntegerField()),
                ('required', models.BooleanField(default=True, verbose_name='required')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ThingNecessity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.CharField(max_length=300, verbose_name='description')),
                ('price', models.IntegerField(verbose_name='price')),
                ('count', models.IntegerField(verbose_name='count')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TimeNecessity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.CharField(max_length=300, verbose_name='description')),
                ('price', models.IntegerField(verbose_name='price')),
                ('count', models.IntegerField(default=1, verbose_name='count')),
                ('start_date', models.DateField(verbose_name='start_date')),
                ('end_date', models.DateField(verbose_name='end_date')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TicketQR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('validation_code', models.TextField(verbose_name='validation_code')),
                ('validated_at', models.DateTimeField(null=True, verbose_name='validated_at')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ThingSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('supportType', models.CharField(max_length=30, null=True)),
                ('comment', models.TextField(blank=True, verbose_name='Do you have a comment')),
                ('status', models.CharField(choices=[('review', 'review'), ('delivered', 'delivered'), ('accepted', 'accepted'), ('declined', 'declined'), ('expired', 'expired')], default='review', max_length=20, verbose_name='status')),
                ('status_since', models.DateTimeField(default=django.utils.timezone.now, verbose_name='status_since')),
                ('price', models.IntegerField(verbose_name='price')),
                ('from_money_supports', models.ManyToManyField(blank=True, to='projects.MoneySupport')),
                ('necessity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='supports', to='projects.thingnecessity')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_score', models.IntegerField(db_index=True, default=0)),
                ('num_vote_up', models.PositiveIntegerField(db_index=True, default=0)),
                ('num_vote_down', models.PositiveIntegerField(db_index=True, default=0)),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('text', models.TextField(verbose_name='text')),
                ('published_at', models.DateTimeField(verbose_name='published_at')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model, stream_django.activity.Activity),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('description', models.TextField(blank=True)),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('order', models.IntegerField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
                ('prototype', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.questionprototype')),
            ],
            options={
                'unique_together': {('prototype', 'project')},
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='moneysupport',
            name='necessity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='money_supports', to='projects.thingnecessity', verbose_name='Which necessity do you wish to donate to'),
        ),
        migrations.AddField(
            model_name='moneysupport',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project'),
        ),
        migrations.AddField(
            model_name='moneysupport',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EpayMoneySupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('supportType', models.CharField(max_length=30, null=True)),
                ('comment', models.TextField(blank=True, verbose_name='Do you have a comment')),
                ('status', models.CharField(choices=[('review', 'review'), ('delivered', 'delivered'), ('accepted', 'accepted'), ('declined', 'declined'), ('expired', 'expired')], default='review', max_length=20, verbose_name='status')),
                ('status_since', models.DateTimeField(default=django.utils.timezone.now, verbose_name='status_since')),
                ('amount', models.FloatField(verbose_name='How much do you wish to donate')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('text', models.TextField(verbose_name='announcement')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model, stream_django.activity.Activity),
        ),
        migrations.CreateModel(
            name='TimeSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('supportType', models.CharField(max_length=30, null=True)),
                ('comment', models.TextField(blank=True, verbose_name='Do you have a comment')),
                ('status', models.CharField(choices=[('review', 'review'), ('delivered', 'delivered'), ('accepted', 'accepted'), ('declined', 'declined'), ('expired', 'expired')], default='review', max_length=20, verbose_name='status')),
                ('status_since', models.DateTimeField(default=django.utils.timezone.now, verbose_name='status_since')),
                ('price', models.IntegerField(verbose_name='price')),
                ('start_date', models.DateField(verbose_name='start_date')),
                ('end_date', models.DateField(verbose_name='end_date')),
                ('necessity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supports', to='projects.timenecessity')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('necessity', 'user')},
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField(editable=False)),
                ('answer', models.TextField(blank=True, verbose_name='answer')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('project', 'question', 'user')},
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
    ]
