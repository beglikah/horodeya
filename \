from django.shortcuts import render, redirect
from django.http import HttpResponseRedirect

from rules.contrib.views import LoginRequiredMixin, AutoPermissionRequiredMixin
from django.views.generic.edit import CreateView, UpdateView

from django.views import generic
from django.contrib.auth.decorators import login_required
from documents.models import Document
from documents.forms import DocumentForm


# Create your views here.
class DocumentsList(generic.ListView):
    model = Document
    template_name = 'documents/documents_list.html'

    def handle_no_permission(self):
        return redirect('permission_denied')

    def dispatch(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            return HttpResponseRedirect('/accounts/ligin/')
        return super().dispatch(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        return context


@login_required
def upload_doc(request):
    user = request.user
    form = DocumentForm()
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)  # Do not forget to add: request.FILES
        print(form)
        if form.is_valid():
            title = f.cleaned_data['title']
            # Do something with our files or simply save them
            # if saved, our files would be located in media/ folder under the project's base folder
            form.save()
    return render(request, 'documents/document_form.html', locals())


class DocumentCreate(LoginRequiredMixin, CreateView):
    model = Document
    form_class = DocumentForm
    success_url = '/documents/'

    def dispatch(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            return HttpResponseRedirect('/accounts/login/')
        return super().dispatch(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        print("Context: ", context)
        return context

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        self.author = self.request.user
        print("Author", self.author)
        kwargs.update({'user': self.request.user})
        print(kwargs)
        return kwargs

    def upload_pdf(request):
        form = DocumentForm()
        if request.method == 'POST':
            form = UploadDocumentForm(request.POST, request.FILES)  # Do not forget to add: request.FILES
            if form.is_valid():
                # Do something with our files or simply save them
                # if saved, our files would be located in media/ folder under the project's base folder
                form.save()
        form.instance.author = self.request.user
        print(form)

        obj = form.save(commit=False)
        print("New object: ", obj)
        print("Files1: ", self.request.document)
        if self.request.FILES:
            for f in self.request.FILES.getlist('document'):
                obj = self.model.objects.create(file=f)
                print("Files: ", files)

        return super().form_valid(form)

    def form_invalid(self, form):
        return self.render_to_response(self.get_context_data(form=form))

    # def form_valid(self, form):
    #     user = self.request.user
    #     print(user)
    #     form.instance.author = self.request.user
    #     print(form.instance.author)
    #     form.instance.document = self.document
    #     print(form.instance.document)
    #     doc = form.instance
    #     form.save()
    #     return super().form_valid(form)


class DocumentUpdate(AutoPermissionRequiredMixin, UpdateView):
    model = Document
    form_class = DocumentForm

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs.update({'user': self.request.user})
        return kwargs

    def form_valid(self, form):
        user = self.request.user
        document = form.instance
        if document.author != user:
            form.add_error(
                'document',
                "This document is not uploaded from you. You can't change it! "
            )
            return super().form_invalid(form)
        return super().form_valid(form)
